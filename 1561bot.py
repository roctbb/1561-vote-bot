from telebot import TeleBot, types
from config import token, default_balance, projects_count
import json

bot = TeleBot(token=token)

state = {}

try:
    with open('state.json') as f:
        state = json.load(f)
except:
    state = {
        "projects": {
            str(i): {
                "count": 0,
                "reviews": [],
                "users": []
            } for i in range(1, projects_count + 1)
        },
        "users": {}
    }


def safe_send(to, m, keyboard=None):
    try:
        bot.send_message(to, m, reply_markup=keyboard)
    except Exception as e:
        print("Message error:", e)


def save():
    try:
        with open('state.json', 'w') as f:
            f.write(json.dumps(state))
    except Exception as e:
        print("save error", e)


def init_user(message):
    if str(message.chat.id) not in state["users"]:
        state["users"][str(message.from_user.id)] = {
            "balance": default_balance,
            "user_id": message.from_user.id,
            "state": "project"
        }

        try:
            state["users"][str(message.from_user.id)]["username"] = message.from_user.username
        except:
            pass

        try:
            state["users"][str(message.from_user.id)]["first_name"] = message.from_user.first_name
            state["users"][str(message.from_user.id)]["last_name"] = message.from_user.last_name
        except:
            pass


def make_projects_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    for i in range(1, projects_count + 1):
        button = types.KeyboardButton(text="üóí " + str(i))
        keyboard.add(button)

    return keyboard


def make_money_keyboard(money_count):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

    keyboard.add("–ù–∞–∑–∞–¥")
    for i in range(1, money_count + 1):
        button = types.KeyboardButton(text="üí∏ " + str(i))
        keyboard.add(button)

    return keyboard


def make_voting(message):
    if state["users"][str(message.from_user.id)]["balance"] > 0:
        state["users"][str(message.from_user.id)]["state"] = "project"
        safe_send(message.chat.id, "–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å üëÄ.", None)
    else:
        state["users"][str(message.from_user.id)]["state"] = "finished"
        safe_send(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏! –¢—ã –≤–ª–æ–∂–∏–ª –≤—Å–µ —Å–≤–æ–∏ –º–æ–Ω–µ—Ç—ã! üôå")



@bot.message_handler(commands=['start', 'help'])
def start(message):
    init_user(message)

    safe_send(message.chat.id, f"""–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –ª–µ—Ç–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞—à–µ–π —à–∫–æ–ª—ã ü§ì. 
    
–°–µ–π—á–∞—Å —É —Ç–µ–±—è üí∏ {state["users"][str(message.from_user.id)]["balance"]} –º–æ–Ω–µ—Ç. –¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –≤–ª–æ–∂–∏—Ç—å —Å—Ä–∞–∑—É –≤—Å–µ –º–æ–Ω–µ—Ç—ã –∏–ª–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–≤–æ–π –∫–∞–ø–∏—Ç–∞–ª –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏.""")

    make_voting(message)
    save()

@bot.message_handler(commands=['alive'])
def alive(message):
    safe_send(message.chat.id, "yep.")

@bot.message_handler(content_types=['text'])
def process_message(message):
    init_user(message)

    answer = str(message.text)
    money_count = state["users"][str(message.from_user.id)]["balance"]


    if state["users"][str(message.from_user.id)]["state"] == "project":
        answer = answer.lstrip("üóí ")
        if answer.isnumeric() and int(answer) in range(1, projects_count + 1):
            if money_count > 0:
                state["users"][str(message.from_user.id)]["state"] = "money"
                state["users"][str(message.from_user.id)]["chosen"] = answer
                safe_send(message.chat.id, f'–°–µ–π—á–∞—Å —É —Ç–µ–±—è üí∏ {money_count} –º–æ–Ω–µ—Ç. –°–∫–æ–ª—å–∫–æ —Ö–æ—á–µ—à—å –æ—Ç–¥–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {answer}?', make_money_keyboard(money_count))
            else:
                safe_send(message.chat.id, "–ú–æ–Ω–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        else:
            safe_send(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...", None)

    elif state["users"][str(message.from_user.id)]["state"] == "money":
        answer = answer.lstrip("üí∏ ")
        if answer.isnumeric() and int(answer) in range(1, money_count + 1):
            state["users"][str(message.from_user.id)]["state"] = "review"

            chosen_project = state["users"][str(message.from_user.id)]["chosen"]
            state["projects"][chosen_project]["count"] += int(answer)
            state["projects"][chosen_project]["users"].append((str(message.from_user.id), int(answer)))

            state["users"][str(message.from_user.id)]["balance"] -= int(answer)

            safe_send(message.chat.id, "–†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —ç—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è? –ß—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∞–≤—Ç–æ—Ä–∞–º? –û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º... üñå", types.ReplyKeyboardRemove())
        else:
            make_voting(message)

    elif state["users"][str(message.from_user.id)]["state"] == "review":

        chosen_project = state["users"][str(message.from_user.id)]["chosen"]
        state["projects"][chosen_project]["reviews"].append((str(message.from_user.id), answer))

        safe_send(message.chat.id, "–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —Ç–≤–æ–π –≥–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üëç")
        make_voting(message)
    else:
        make_voting(message)

    save()

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print("General exception:", e)
